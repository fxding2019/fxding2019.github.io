<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Hugo 主题 MemE</title>
        <link>https://fxding2019.github.io/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.89.4 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>reuixiy@gmail.com (reuixiy)</managingEditor>
        
        
            <webMaster>reuixiy@gmail.com (reuixiy)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 03 Dec 2021 22:23:20 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://fxding2019.github.io/rss.xml" />
        
        
            <item>
                <title>Typora图片自动上传</title>
                <link>https://fxding2019.github.io/posts/typora%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</link>
                <guid isPermaLink="true">https://fxding2019.github.io/posts/typora%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</guid>
                <pubDate>Fri, 03 Dec 2021 21:34:42 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;typora图片自动上传&#34;&gt;Typora图片自动上传&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;h3 id=&#34;现存问题&#34;&gt;现存问题&lt;/h3&gt;
&lt;p&gt;习惯使用markdown的人应该都Typora非常简洁高效，但导入文件的时候，只会把文件保存在本地计算机，文件中保存的是本地的绝对路径，当在本地写好文档上传当各个技术博客平台时，还需要手动的上传一遍，图片多的时候无疑是一个很大的工作量。&lt;/p&gt;
&lt;h3 id=&#34;解决方案&#34;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;Typora 编辑器在新版本上(≥ 0.9.9.32 on macOS or 0.9.84 on Windows / Linux) 增加了一个 &lt;code&gt;上传图片&lt;/code&gt; 的功能，通过第三方app或脚本在插入图片时将图片上传到网络，然后文档中会直接插入图片的图床链接。&lt;/p&gt;
&lt;p&gt;接下来介绍Typora如何通过PicGo来自动/手动上传图片到自建github图床。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图床就是一个你在网络上存放图片的地方，很多公司都提供了这样一个地方让你存放图片，比如微博，简书，七牛云等，但这些毕竟是公司资源，说不定哪天就不能访问了。所以，自己构建一个图床就显得比较重要了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;创建图床&#34;&gt;创建图床&lt;/h2&gt;
&lt;p&gt;GitHub + PicGo + jsDelivr 的方式是目前比较主流的方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GitHub 用来存放图片，目前投入微软怀抱，后台硬，不会随便倒闭&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FMolunerfinn%2FPicGo&#34;&gt;PicGo &lt;/a&gt; 是一个用于快速上传图片并获取图片 URL 链接的工具，通过该链接访问网络图片资源&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jsdelivr.com%2F&#34;&gt;jsDelivr&lt;/a&gt; 是用于开源项目的免费公共CDN(Content Delivery Network，即内容分发网络)，用来加速GitHub的访问速度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建github-repository&#34;&gt;创建GitHub repository&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/5qlyzFbGD1UuLHd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;生成github-token&#34;&gt;生成GitHub Token&lt;/h3&gt;
&lt;p&gt;进入个人设置 &lt;code&gt;Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens -&amp;gt; Generate new token&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/ED9LkWAhzQgGpsF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Note&lt;/code&gt;中填好描述，z选择一个合适的过期时候后，勾选&lt;code&gt;repo&lt;/code&gt;，然后点击&lt;code&gt;Generate token&lt;/code&gt;生成一个Token&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/Zcp3yXUHJC78LaG.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意这个Token只会显示一次，所以，需要保存下来&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/P6meLY5Fsr4XBGi.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置picgo&#34;&gt;配置PicGo&lt;/h3&gt;
&lt;p&gt;下载安装&lt;a href=&#34;https://github.com/Molunerfinn/PicGo/releases&#34;&gt;PicGo&lt;/a&gt;后，打开GitHub图床配置窗口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/IGYVC2NwjSD9Ovc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设定仓库名：按照 &lt;code&gt;用户名/图床仓库名&lt;/code&gt; 的格式填写&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eg: fxding2019/PictureBed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设定分支名：&lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设定Token：填写之前在GitHub生成的Token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定存储路径：填写想要储存的路径，如 &lt;code&gt;BlogImg/&lt;/code&gt;，这样就会在仓库下创建一个名为&lt;code&gt;BlogImg&lt;/code&gt; 的文件夹，图片将会储存在此文件夹中。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;注意：BlogImg/ 不要写成 BlogImg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设定自定义域名：图片上传后，PicGo 会按照 &lt;code&gt;自定义域名+储存路径+上传的图片名&lt;/code&gt; 的方式生成访问链接，并放到粘贴板上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eg: https://cdn.jsdelivr.net/gh/fxding2019/PictureBed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为我们要使用 jsDelivr 加速访问，所以自定义域名可以设置为 &lt;code&gt;https://cdn.jsdelivr.net/gh/用户名/图床仓库名&lt;/code&gt;，上传完毕后，就可以通过 &lt;code&gt;https://cdn.jsdelivr.net/gh/用户名/图床仓库名/储存路径/上传的图片名&lt;/code&gt; 加速访问我们的图片了。存储路径为&lt;code&gt;BlogImg/&lt;/code&gt;,  所以通过&lt;code&gt;https://cdn.jsdelivr.net/gh/chenshifangcheng/PictureBed/BlogImg/上传的图片名&lt;/code&gt; 来加速访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击确定以及设置为默认图床&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;code&gt;时间戳重命名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上传图片时，如果多次上传同一张图片的话，文件名会一样，导致文件已存在而报错，在上传图片时使用时间戳不会因为文件名重复而报错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/fxding2019/PictureBed/BlogImg/202112032215151.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试上传&lt;/p&gt;
&lt;p&gt;拖动图片进入上传区后自动上传图片，并在github repository中自动创建目录存放图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/fxding2019/PictureBed/BlogImg/202112032217745.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;typora设置自动上传&#34;&gt;Typora设置自动上传&lt;/h2&gt;
&lt;p&gt;进入&lt;code&gt;文件 -&amp;gt; 偏好设置 -&amp;gt; 图片&lt;/code&gt;，在&lt;code&gt;插入图片时&lt;/code&gt;区域，下拉框选择&lt;code&gt;上传图片&lt;/code&gt;，勾选如下三项&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/fxding2019/PictureBed/BlogImg/202112032221254.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;验证图片上传选项&lt;/code&gt;测试上传效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/fxding2019/PictureBed/BlogImg/202112032220934.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，直接把图片粘贴到Typora时，就会转换为github图床的路径。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Hugo博客搭建并部署到GitHub</title>
                <link>https://fxding2019.github.io/posts/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/</link>
                <guid isPermaLink="true">https://fxding2019.github.io/posts/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/</guid>
                <pubDate>Fri, 03 Dec 2021 20:58:43 &#43;0800</pubDate>
                
                    <author>reuixiy@gmail.com (reuixiy)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;hugo博客搭建并部署到github-for-windows&#34;&gt;hugo博客搭建并部署到GitHub【 for Windows】&lt;/h1&gt;
&lt;h3 id=&#34;下载配置hugo&#34;&gt;下载配置hugo&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开 Hugo 官方 GitHub 的 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; 页面&lt;/li&gt;
&lt;li&gt;选择最新的版本下载（选择 &lt;code&gt;hugo_xxx_Windows-64/32bit.zip&lt;/code&gt;），如果使用&lt;code&gt;meme&lt;/code&gt;主题，要下载extended版本的。&lt;/li&gt;
&lt;li&gt;将压缩包内的 &lt;code&gt;hugo.exe&lt;/code&gt; 文件解压至 &lt;code&gt;D:\hugo&lt;/code&gt; 文件夹目录下&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;文件资源管理器&lt;/code&gt;（即 &lt;code&gt;我的电脑&lt;/code&gt;）中空白处点击鼠标右键，打开属性&lt;/li&gt;
&lt;li&gt;依次点击 &lt;code&gt;高级系统设置&lt;/code&gt; - &lt;code&gt;环境变量&lt;/code&gt; ，双击打开系统变量中的 &lt;code&gt;Path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在环境变量界面中双击空白行，添加 &lt;code&gt;D:\hugo&lt;/code&gt;，点击确定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开命令提示符，输入语句：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-undefined&#34; data-lang=&#34;undefined&#34;&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以确认 Hugo 是否安装成功（如果安装成功就能看到版本号）&lt;/p&gt;
&lt;h3 id=&#34;新建github-repository&#34;&gt;新建github repository&lt;/h3&gt;
&lt;p&gt;新建一个后缀为&lt;code&gt;.github.io&lt;/code&gt;的 repository&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/FhYJUyq2nQVld91.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;github与hugo建立关联&#34;&gt;github与hugo建立关联&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接clone上述的repository【也可以自己在本地计算机建好文件，然后使用&lt;code&gt; git remote add origin&lt;/code&gt;与远程仓库建立关联】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入repository的根目录，运行git bash here，执行以下命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site .   // 在当前目录下创建hugo站点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装主题&#34;&gt;安装主题&lt;/h3&gt;
&lt;p&gt;进入到&lt;code&gt;themes目录&lt;/code&gt;下，在&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;官网主题&lt;/a&gt;中选择一款主题，或使用本作者&lt;a href=&#34;https://github.com/reuixiy/hugo-theme-meme&#34;&gt;推荐的主题&lt;/a&gt;，&lt;code&gt;git clone&lt;/code&gt;下来之后把&lt;code&gt;themes/meme/config-examples/zh-cn/&lt;/code&gt;目录下的&lt;code&gt;config.toml&lt;/code&gt;文件复制一份到repository根目录下，修改相关的配置，更多meme主题配置介绍见&lt;a href=&#34;https://io-oi.me/tech/documentation-of-hugo-theme-meme/#hugo&#34;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 默认为：
baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;

// 修改为
baseURL = &amp;quot;github发布出去的博客地址&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
publishDir = &amp;quot;docs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改了baseURL，并增加了publishDir。publishDir的修改是因为：当在content目录下添加了.md文件后，需要执行&lt;code&gt;hugo -t &amp;lt;主题名&amp;gt;&lt;/code&gt;来用hugo把发布用的目录编译出来，而默认的编译目录名为&lt;code&gt;publish&lt;/code&gt;，这里改成了&lt;code&gt;docs&lt;/code&gt;，这是因为Github规定了用做Gitpages的分类只有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发布路径在master分支下。&lt;/li&gt;
&lt;li&gt;发布路径在master分支的docs目录下。&lt;/li&gt;
&lt;li&gt;发布路径在gh-pages 分支下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只将默认的发布目录/publish推送上去，不利于跨设备修改我的博客，因此要将整个目录都推送上去，然后将/publish改成/docs，给github识别成gitpages用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详情见  &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;User, Organization, and Project Pages&lt;/a&gt;，参考自&lt;a href=&#34;https://www.jianshu.com/p/02b3343295ac&#34;&gt;Hugo配合GitHub搭建博客（Windows 10）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;新建文章&#34;&gt;新建文章&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根目录下git bash执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new &amp;quot;posts/hello-world.md&amp;quot;
hugo new &amp;quot;about/_index.md&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不到 100 ms 后，打开 http://localhost:1313/，恭喜你！你已经成功在本地搭建好博客了🎉🎉🍻！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果不加&lt;code&gt;-D&lt;/code&gt;参数，本地运行看不到相关文件内容，可以打开文件，把&lt;code&gt;draft=true&lt;/code&gt;改为&lt;code&gt;false&lt;/code&gt;，然后运行&lt;code&gt;hugo server&lt;/code&gt;进行查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;发布文章&#34;&gt;发布文章&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把文件的&lt;code&gt;draft=true&lt;/code&gt;改为&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行以下命令生成发布目录【经上面的配置之后，在docs下生成】&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo -t meme  // 根目录下执行，meme是hugo主题名
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用git上传发布&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
git commit -m &amp;quot;XXX&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在github repository的&lt;code&gt;settings -&amp;gt; Pages&lt;/code&gt;中，把GitHub Pages Source改为&lt;code&gt;docs&lt;/code&gt;目录，点击save保存&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/03/dvwHtoZPXph8miQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击published site连接即可访问&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果本地更新之后，github published site页面内容没有更新，可能是浏览器缓存造成的，清理缓存即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
